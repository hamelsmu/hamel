"""Simple utilities for working with Google's Gemini API"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_gem.ipynb.

# %% auto 0
__all__ = ['gem', 'yt_chapters']

# %% ../nbs/00_gem.ipynb 5
import os
from pathlib import Path
from fastcore.all import *
from google import genai
from google.genai import types
from functools import partial

# %% ../nbs/00_gem.ipynb 9
def _client():
    "Get Gemini client"
    return genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))

# %% ../nbs/00_gem.ipynb 12
def _is_url(s):
    "Check if string is a URL"
    if not isinstance(s, str): return False
    return (s.startswith('http://') or 
            s.startswith('https://') or 
            s.startswith('www.') or 
            'youtube.com' in s or 
            'youtu.be' in s)

def _make_part(o):
    "Convert object to Gemini Part"
    if isinstance(o, (str, Path)):
        p = Path(o)
        if p.exists():
            mime_map = {'.pdf': 'application/pdf', 
                        '.png': 'image/png', 
                        '.jpg': 'image/jpeg', 
                        '.jpeg': 'image/jpeg', 
                        '.gif': 'image/gif'}
            mime = mime_map.get(p.suffix.lower(), 'application/octet-stream')
            return types.Part.from_bytes(mime_type=mime, data=p.read_bytes())
        elif _is_url(o): return types.Part.from_uri(file_uri=o, mime_type='video/*')
    return None

# %% ../nbs/00_gem.ipynb 14
def gem(prompt, # Text prompt
        o=None, # Optional file/URL attachment or list of attachments
        model='gemini-2.5-flash',
        thinking=-1,
        search=False):
    "Generate content with Gemini"
    parts = [types.Part.from_text(text=prompt)]
    
    # Handle single attachment or list of attachments
    attachments = o if isinstance(o, list) else [o] if o else []
    for attachment in attachments:
        if part := _make_part(attachment): parts.insert(0, part)
    
    contents = types.Content(role='user', parts=parts) if attachments else prompt    
    config_dict = {
        'thinking_config': types.ThinkingConfig(thinking_budget=thinking),
        'response_mime_type': 'text/plain'
    }
    # Adjust media_resolution for videos for more tokens
    if any(attachment and not Path(str(attachment)).exists() for attachment in attachments): 
        config_dict['media_resolution'] = 'MEDIA_RESOLUTION_LOW'
    config_dict['tools'] = []
    if search: config_dict['tools'].append(types.Tool(google_search=types.GoogleSearch()))
    cfg = types.GenerateContentConfig(**config_dict)
    resp = _client().models.generate_content(model=model, contents=contents, config=cfg)
    return resp.text

# %% ../nbs/00_gem.ipynb 31
def yt_chapters(link):
    "Generate YoutTube Summary and Chapters From A Public Video."
    
    chapter_prompt="Generate a succinct video summary (1-2 sentences) followed by YouTube chapter timestamps for this video. Format each line of the chapter summaries as 'MM:SS - Chapter Title' (e.g., '02:30 - Introduction'). Start with 00:00. Include all major topics and transitions and be thorough - do not miss any important topics.  For the summary, do not say 'In this video, we will cover the following topics', 'This video discusses..' or anything like that. Instead, reference the main speaker's name if you know it.  If there is a Q&A Section, enumerate individual questions as additional chapters."
    return gem(prompt=chapter_prompt, o=link, model="gemini-2.5-pro")
