"""Utilities for Content Creation From YouTube"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_yt.ipynb.

# %% auto 0
__all__ = ['yt_chapters', 'transcribe']

# %% ../nbs/01_yt.ipynb 2
import re
from typing import Optional, Annotated
import typer
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound
from .gem import gem

# %% ../nbs/01_yt.ipynb 4
def yt_chapters(link):
    "Generate YoutTube Summary and Chapters From A Public Video."
    
    chapter_prompt="Generate a succinct video summary (1-2 sentences) followed by YouTube chapter timestamps for this video. Format each line of the chapter summaries as 'MM:SS - Chapter Title' (e.g., '02:30 - Introduction'). Start with 00:00. Include all major topics and transitions and be thorough - do not miss any important topics.  For the summary, do not say 'In this video, we will cover the following topics', 'This video discusses..' or anything like that. Instead, reference the main speaker's name if you know it.  If there is a Q&A Section, enumerate individual questions as additional chapters."
    return gem(prompt=chapter_prompt, o=link, model="gemini-2.5-pro")

# %% ../nbs/01_yt.ipynb 8
def _extract_video_id(url: str) -> Optional[str]:
    """Extract YouTube video ID from various URL formats."""
    for pattern in [r'(?:youtube\.com/watch\?v=|youtu\.be/)([^&\n?#]+)', 
                    r'youtube\.com/embed/([^&\n?#]+)', 
                    r'youtube\.com/v/([^&\n?#]+)']:
        if match := re.search(pattern, url): return match.group(1)
    return url if re.match(r'^[a-zA-Z0-9_-]{11}$', url) else None

def _format_timestamp(seconds: float) -> str:
    """Convert seconds to HH:MM:SS format."""
    h, m, s = int(seconds // 3600), int((seconds % 3600) // 60), int(seconds % 60)
    return f"{h:02d}:{m:02d}:{s:02d}"
        
def _format_seconds(seconds: float): return f"{int(seconds):d}s"       

        
def transcribe(url, seconds_only = False):
    "Download YouTube transcript."
    if not (video_id := _extract_video_id(url)): raise ValueError(f"Could not extract video ID from '{url}'")
    try: transcript_data = YouTubeTranscriptApi.get_transcript(video_id, languages=['en'])
    except (TranscriptsDisabled, NoTranscriptFound) as e: raise ValueError(f"{str(e)} for video: {video_id}")
    format_func = _format_seconds if seconds_only else _format_timestamp
    transcript_text = '\n'.join(f"[{format_func(e['start'])}] {e['text']}" for e in transcript_data)
    return transcript_text
